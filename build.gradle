buildscript {
    repositories {
        jcenter()
    }
}

// Apply third-party plugins.
plugins {
    // We need to hard-code the version here because of
    // https://github.com/gradle/gradle/issues/1697
    id 'org.jetbrains.kotlin.jvm' version '1.1.2'

    // Note that the detekt Gradle plugin version does not necessarily
    // match the detekt tool version.
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.M11'

    id 'com.github.ben-manes.versions' version '0.14.0'
}

// Apply core plugins.
apply plugin: 'application'

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean isNonFinalVersion = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }

            if (isNonFinalVersion) {
                selection.reject('Release candidate')
            }
        }
    }
}

mainClassName = 'Main'

applicationName = 'pran'
applicationDefaultJvmArgs = [
        '-Dorg.slf4j.simpleLogger.levelInBrackets=true',
        '-Dorg.slf4j.simpleLogger.showLogName=false',
        '-Dorg.slf4j.simpleLogger.showThreadName=false'
]

sourceSets {
    funTest {
        kotlin.srcDir file('src/funTest/kotlin')
        resources.srcDir file('src/funTest/resources')
    }
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.2'

    compile 'com.beust:jcommander:1.72'
    compile 'com.beust:klaxon:0.31'

    // Use slf4j-simple as logger for kotlin-logging, as the latter is a wrapper for slf4j and depends on an
    // implementation of slf4j.
    compile 'io.github.microutils:kotlin-logging:1.4.4'
    compile 'org.slf4j:slf4j-simple:1.7.25'

    funTestCompile sourceSets.main.output
    funTestCompile sourceSets.test.output
    funTestCompile configurations.testCompile
    funTestRuntime configurations.testRuntime

    funTestCompile 'io.kotlintest:kotlintest:2.0.2'
}

task funTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    classpath = sourceSets.funTest.runtimeClasspath
    testClassesDirs = sourceSets.funTest.output.classesDirs
}

check.dependsOn funTest
