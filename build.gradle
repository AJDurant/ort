buildscript {
    repositories {
        jcenter()
    }
}

// Apply third-party plugins.
plugins {
    // We need to hard-code the version here because of
    // https://github.com/gradle/gradle/issues/1697
    id 'org.jetbrains.kotlin.jvm' version '1.1.3-2'

    // Note that the detekt Gradle plugin version does not necessarily
    // match the detekt tool version.
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.M13.2'

    id 'com.github.ben-manes.versions' version '0.15.0'
}

// Apply core plugins.
apply plugin: 'application'
apply plugin: 'jacoco'

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean isNonFinalVersion = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }

            if (isNonFinalVersion) {
                selection.reject('Release candidate')
            }
        }
    }
}

applicationName = 'pran'
mainClassName = 'com.here.provenanceanalyzer.Main'

sourceSets {
    funTest {
        kotlin.srcDirs 'src/funTest/kotlin'
        resources.srcDirs 'src/funTest/resources'
    }
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.3-2'

    compile 'com.beust:jcommander:1.72'
    compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
    compile 'com.vdurmont:semver4j:2.0.2'

    // Use logback-classic as the logger for slf4k as it allows to change the log level at runtime.
    compile 'ch.frankel.log4k:slf4k-api:1.0.0'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    funTestCompile sourceSets.main.output
    funTestCompile sourceSets.test.output
    funTestCompile configurations.testCompile
    funTestRuntime configurations.testRuntime

    funTestCompile 'io.kotlintest:kotlintest:2.0.4'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.1'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.1'
    }
}

detekt {
    version = '1.0.0.M13.2'

    profile('main') {
        config = 'detekt.yml'
    }
}

jacoco {
    toolVersion = '0.7.9'
}

task funTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    classpath = sourceSets.funTest.runtimeClasspath
    testClassesDirs = sourceSets.funTest.output.classesDirs
}

task funTestCoverage(type: JacocoReport, dependsOn: funTest) {
    description = 'Generates the code coverage report for the functional tests.'
    group = 'Reporting'

    executionData funTest
    sourceSets sourceSets.main

    reports {
        // Enable XML in addition to HTML for CI integration.
        xml.enabled true
    }
}

check.dependsOn detektCheck, funTest
